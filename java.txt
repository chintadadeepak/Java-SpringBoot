Static keyword
static variables shared by all the objects.
static variables are the class members not the object members
they can be accessed with class name.

class Mobile {
    String brand;
    int price;
    static String name;

    public void show() {
        System.out.println(brand + " : " + price + " : " + name);
    }
}


Mobile obj1 = new Mobile();
obj1.brand = "Apple";
obj1.price = 1500;
Mobile.name = "SmartPhone";
Mobile obj2 = new Mobile();
obj2.brand = "Samsung";
obj2.price = 1700;
Mobile.name = "Phone";
obj1.show();
obj2.show();

Static Method
// static variables inside non-static method - accepted
// static variables inside static method - accepted
// non - static variables inside non-static method - accepted
// non - static variables inside static method - not accepted directly
// but indirectly we can accept them i.e by passing object reference

class Mobile {
    String brand;
    int price;
    static String name;

    public static void show(Mobile obj) {
        System.out.println(obj.brand + " : " + obj.price + " : " + name);
    }
}

Mobile obj1 = new Mobile();
obj1.brand = "Apple";
obj1.price = 1500;
Mobile.name = "SmartPhone";
Mobile obj2 = new Mobile();
obj2.brand = "Samsung";
obj2.price = 1700;
// Mobile.name = "Phone";
Mobile.show(obj1);
Mobile.show(obj2);


// static block 
// used for intializing the static variables at the time of class loading.
// as we know JVM will creates an object by taking the class as an input
// in order to create an object JVM first loads the class into the class loader 
// so the static block and everything will be executed
// next time as the class was already loaded no static block will be executed
// only constructor will be called at the time of object creation.
// with creating an object class will be loaded with forName(). 
class Mobile {
    String brand;
    int price;
    static String name;

    // syntax for intializing the static variables
    static {
        name = "Phone";
        System.out.println("in static block");
    }

    Mobile() {
        brand = "Nokia";
        price = 500;
        System.out.println("in constructor");
    }

    // public static void show(Mobile obj) {
    // System.out.println(obj.brand + " : " + obj.price + " : " + name);
    // }
}


Class.forName("Mobile");
// Mobile obj1 = new Mobile();
// obj1.brand = "Apple";
// obj1.price = 1500;
// Mobile.name = "SmartPhone";
// Mobile obj2 = new Mobile();
// obj2.brand = "Samsung";
// obj2.price = 1700;
// Mobile.name = "Phone";
// Mobile.show(obj1);
// Mobile.show(obj2);

// Encapsulation - process of binding of data with methods.
// setters and getters - fetching and setting the data with methods
class Mobile {
    private int age;
    private String name;

    public void setAge(int age) {
        this.age = age;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public String getName() {
        return name;
    }
}

Mobile obj = new Mobile();
obj.setAge(20);
obj.setName("Deepak");
System.out.println(obj.getAge() + " : " + obj.getName());


// constructor - Method which was used to intialize the instance variables
// Called whenever we create an object
// No return type and same name as className.

// constructor which does not take anything is called as default constructor
// constructor which takes parameters is called as parameterized constructor

class Mobile {
    private int age;
    private String name;

    Mobile() {
        System.out.println("Default Constructor");
    }

    Mobile(int age, String name) {
        this.age = age;
        this.name = name;
    }

    // public void setAge(int age) {
    // this.age = age;
    // }

    // public void setName(String name) {
    // this.name = name;
    // }

    public int getAge() {
        return age;
    }

    public String getName() {
        return name;
    }
}


// this and super method
// this() - calls the current class constructor
// super() - calls the super class constructor

class Parent extends Object {
    Parent() {
        super();
        System.out.println("Parent constructor");
    }

    Parent(int num) {
        super();
        System.out.println("Parent parameterized constructor");
    }
}

class Child extends Parent {
    Child() {
        super();
        System.out.println("Child constructor");
    }

    Child(int num) {
        this();
        System.out.println("Child parameterized constructor");
    }
}

// anonymous object
// an object which does not have reference 
// it can not be used more than once.
// object creation involves two steps
// 1. object creation
// 2. assigning that address to the reference variable.
class Mobile {
    Mobile() {
        System.out.println("in constructor..");
    }

    public void show() {
        System.out.println("in show method..");
    }
}

new Mobile().show();
// anonynous object
new Mobile().show();

// inheritance
// process of acquiring the properties and methods
// from a base class by the derived class

VeryAdvCalc obj = new VeryAdvCalc();
int r1 = obj.add(3, 4);
int r2 = obj.sub(5, 2);
int r3 = obj.multi(3, 4);
int r4 = obj.div(5, 2);
double r5 = obj.power(3, 4);
System.out.println(r1 + " : " + r2);
System.out.println(r3 + " : " + r4 + " : " + r5);

// Multiple inheritance is not supported in java because
// of the ambiguity


// packages
// packages are the modules where related grouped files are kept inside a folder

// access-modifiers 
// access-modifiers will allow users to access the methods and instance variables based
// based upon the access given to them

public:
same class - true
same package - subclass - true
same package - non-subclass - true 
different package - subclass - true
different package - non-subclass - true


private:
same class - true
same package - subclass - false
same package - non-subclass - false 
different package - subclass - false
different package - non-subclass - false


default:
same class - true
same package - subclass - true
same package - non-subclass - true 
different package - subclass - false
different package - non-subclass - false


protected:
same class - true
same package - subclass - true
same package - non-subclass - true 
different package - subclass - true
different package - non-subclass - false

// polymorphism - poly - many, morphism - behaviour
// the reference will show different bahaviour based upon the way that the object you
// are assigning to that reference

// polymorphism is of two types
// 1. compile time polymorphism --> method overloading
// 2. run time polymorphism --> method overriding, dynamic method dispatch
// runtime polymorphism here is depending upon the object that you are it's method
// will be executed

// dynamic method dispatch
// you can assign the child implementation to the parent reference
// because every child is derived from the parent
class Parent {
    public void show() {
        System.out.println("In parent");
    }
}

class Child1 extends Parent {
    public void show() {
        System.out.println("In child-1");
    }
}

class Child2 extends Parent {
    public void show() {
        System.out.println("In child-2");
    }
}

Parent obj = new Parent(); // both object implementation and reference type is Parent
                                   // parent method will be called
obj.show();
obj = new Child1(); // reference parent type and implementation child type.
obj.show();
obj = new Child2(); // reference parent type and implementation child type.
obj.show();

// final variable - final makes a variable constant.
// final class - Final class can not be inherited
// final method - stopping the method overriding

class Parent {
    public final void show() {
        System.out.println("in Parent");
    }
}

class Child extends Parent {
    // public void show() {
    //     System.out.println("in Child");
    // }
}

// final float PIE = 3.14f;
// PIE = 3.15f;
Child obj = new Child();
obj.show();

// Object Class
// by default any class which is not under inheritance will extend the Object class
// if try to print an object reference, it will call toString() implicitly
class Human {
    int age;
    String name;

    public boolean equals(Human obj) {
        return this.age == obj.age && this.name.equals(obj.name);
    }
}

Human obj1 = new Human();
Human obj2 = new Human();
obj1.age = 15;
obj1.name = "deepak";
obj2.age = 15;
obj2.name = "deepak";
System.out.println(obj1.equals(obj2));
// System.out.println(obj1); // implicitly calls the toString()
// System.out.println(obj1.toString());

// Upcasting and Downcasting

class Parent {
    public void show1() {
        System.out.println("in parent show");
    }
}

class Child extends Parent {
    public void show2() {
        System.out.println("in child show");
    }
}


Parent obj = new Child(); // converting child class implementation
// to parent class --> upcasting
obj.show1();
Child obj1 = (Child) obj; // converting a parent class reference
// to child class
// obj.show2();
obj1.show1();
obj1.show2();

// Wrapper Class - wrapper means some wrapper around the primtive values
// dealing with Collection API
// In Collection API we will work with Objects
// for every primtive type we have a corresponding wrapper class
// ex : int --> Integer, double --> Double, char --> Character


// Integer num = new Integer(5); // this syntax is deprecated
// this process is called as boxing
// System.out.println(num);
Integer num = 5; // auto-boxing --> assigning primtive values directly to the wrapper class
                    // reference
System.out.println(num);
int num1 = num.intValue();
int num2 = num;
// you can follow one of the above.
// both will work
// the process is called as auto-unboxing
System.out.println(num1 + " " + num2);

// abstract keyword
// just declaring the methods 
// implementation will be done by other classes
// abstract class can have abstract methods, non-abstract-methods and combination of both
// abstract class can not be instantiated
// If a class extending the abstract class then it should implement all the abstract methods
// or If it was not able to implement all the methods
// make that extending class abstract
// If any class contains even one abstract method, then that class should be made as abstract
// classes which contain abstract methods are called as abstract classes
// classes which implement the abstract methods are called as concrete class
// we can instantiate the concrete class
abstract class Car {
    public abstract void selfDrive();

    public void musicSystem() {
        System.out.println("playing music");
    }

    public abstract void engineConfig();
}

abstract class Ford extends Car {
    public void engineConfig() {
        System.out.println("Engine configured");
    }
}

class Tesla extends Ford {
    public void selfDrive() {
        System.out.println("self-automated car");
    }
}

Car obj = new Tesla();
obj.musicSystem();
obj.selfDrive();
obj.engineConfig();

// inner class - class within a class
// for accessing the child class members you need an object.
// you can create an object with help outer class object or if class static we can create the help of outer className.
// static class will only for inner class we can not use static keyword for outer class
class Parent {
    int age;

    public void parentShow() {
        System.out.println("in parent show");
    }

    static class Child {
        public void childShow() {
            System.out.println("in child show");
        }
    }
}

// Parent obj1 = new Parent();
// Parent.Child obj2 = obj1.new Child(); // this one way, where the class was
// non-static
// obj2.childShow();
Parent.Child obj = new Parent.Child(); // this syntax will work if the inner class was static
obj.childShow();

// anonymous class - the class which does not have any name.
// This is used when dev's want to override the implementation of any method
// without the concept of overriding and generating the bytecode
// for the overridden class 
// in the below syntax we've defined a class which does not have any name
// but it overridding the method show

class Human {
    public void show() {
        System.out.println("In human show");
    }
}

Human obj = new Human() {
    public void show() {
        System.out.println("in alien show");
    }
}; // This implementation is called as inner class
obj.show();

// anonymous and inner class
// as we know we can not instantiate 
// Now we instantiate the abstract class, but the point is we are instantiating the inner class not the abstarct class
abstract class Car {
    public abstract void selfDrive();
}

Car obj = new Car() {
    public void selfDrive() {
        System.out.println("self-driving");
    }
}; // here we've instantiated the inner class
    // not the Car which was an abstract class
obj.selfDrive();

class Desktop implements Computer {
    public void code() {
        System.out.println("code, compile and run in faster way");
    }
}

class Laptop implements Computer {
    public void code() {
        System.out.println("code, compile and run");
    }
}

class Developer {
    public void devApp(Computer com) {
        com.code();
    }
}

Computer com1 = new Laptop();
Computer com2 = new Desktop();
Developer dev = new Developer();
dev.devApp(com2);

// need of interface
// in computer class we just declared and not defined the body of 
// code for code method
// instead of abstract class, we can use interface which will 100% abstraction

// interface 
// with interface we can acheive 100% abstraction
// they can not be instantiated
// If a class not able to implement all the methods then 
// make that class as abstract
// inheritance is supported with interfaces
// the instance variables of interface are final and static
// but why?
// when a concrete class trys to implement an interface
// it will able to access only the methods not the instance variables
// hence they were made static
// why final?
// interface will not get any space inside the heap hence they instance variables are 
// final
interface Computer {
    int age = 20;
    String name = "deepak";

    void code();

    void config();
}

// interface Laptop extends Computer {
// // void show();
// }

class Desktop implements Computer { // concrete class
    public void code() {
        System.out.println("coding..");
    }

    public void config() {
        System.out.println("config..");
    }

    // public void show() {
    // System.out.println("in show..");
    // }
}

Computer com = new Desktop();
com.code();
com.config();
System.out.println(Computer.age + " : " + Computer.name);

// enum
// we can apply enum objects with if and switch statement
enum Status {
    Running, Pending, Failed, Success; // Objects of type Status
}

Status obj = Status.Running;
// Status[] statuses = Status.values();
// for (Status status : statuses)
// System.out.println(status + " : " + status.ordinal());
// System.out.println(obj.ordinal());
// if (obj.equals(Status.Failed))
// System.out.println("failed");
// else if (obj.equals(Status.Pending))
// System.out.println("pending");
// else if (obj.equals(Status.Success))
// System.out.println("success");
// else
// System.out.println("running");

switch (obj) {
    case Running:
        System.out.println("Running");
        break;
    case Pending:
        System.out.println("Pending");
        break;
    case Success:
        System.out.println("Success");
        break;
    case Failed:
        System.out.println("Failed");
        break;
}


// enum class
// enum class extends Enum class
enum Laptop {
    // Running;
    MacBook(2000), XPS(2200), Surface, ThinkPad(2000);

    private int price;

    Laptop() {
        this.price = 500;
    }

    Laptop(int price) {
        this.price = price;
        System.out.println("constructor called..");
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

}

// Laptop macbook = Laptop.MacBook;
// System.out.println(macbook.price);
for (Laptop laptop : Laptop.values())
    System.out.println(laptop + " : " + laptop.getPrice());
// Laptop lap = Laptop.Running;
// System.out.println(lap.getClass());


